import logging
from datetime import datetime, timedelta, time
import pytz
import re
import threading
import time as time_module
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TELEGRAM_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù'
USER_USERNAME = '@absadykov4'
USER_ID = None

TIMEZONE = pytz.timezone("Asia/Almaty")  # –∏–ª–∏ —Å–≤–æ–π

# --- –î–æ–ª–≥–æ–∂–∏–≤—É—â–∏–µ —Å–ø–∏—Å–∫–∏ (–≤ –ø–∞–º—è—Ç–∏, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–±—Ä–æ—Å—è—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ) ---
events = []
shopping_list = []
todo_list = []
birthdays = []

# --- –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
SCHEDULE = {
    "monday": [
        (time(10, 0), time(10, 50), "Database Management Systems", "1.1.241"),
        (time(11, 0), time(12, 50), "Algorithms and Data Structures", "1.1.358"),
    ],
    "wednesday": [
        (time(10, 0), time(10, 50), "Algorithms and Data Structures", "1.1.358"),
        (time(11, 0), time(11, 50), "Psychology", "1.1.226"),
        (time(12, 0), time(13, 50), "Discrete Maths", "1.1.251"),
    ],
    "friday": [
        (time(8, 0), time(8, 50), "Political Science", "1.1.254"),
        (time(9, 0), time(9, 50), "Database Management Systems", "1.1.241"),
        (time(10, 0), time(11, 50), "Discrete Maths", "1.2.224"),
        (time(12, 0), time(13, 50), "Physical Education", "—Å–ø–æ—Ä—Ç–∑–∞–ª"),
    ],
}

# –î–∑—é–¥–æ: –≤—Ç, —á—Ç, —Å–±
JUDO_DAYS = ["tuesday", "thursday", "saturday"]
JUDO_REMINDER_TIME = time(17, 0)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def send_msg(bot: Bot, chat_id, text):
    try:
        bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logger.error(f"Send error: {e}")

# ========== –ò–í–ï–ù–¢–´ (—Å–æ–±—ã—Ç–∏—è) ==========
def parse_event(text):
    # "–∏–≤–µ–Ω—Ç 28.05 10:00 –¥–∂–∏–º —Å –î–∏–¥–∞—Ä–æ–º"
    match = re.match(r"–∏–≤–µ–Ω—Ç (\d{2})\.(\d{2}) (\d{2}):(\d{2}) (.+)", text, re.IGNORECASE)
    if not match:
        return None
    day, month, hour, minute, desc = match.groups()
    now = datetime.now(TIMEZONE)
    year = now.year
    try:
        event_time = datetime(year, int(month), int(day), int(hour), int(minute), tzinfo=TIMEZONE)
        if event_time < now:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            event_time = datetime(year+1, int(month), int(day), int(hour), int(minute), tzinfo=TIMEZONE)
        return event_time, desc
    except:
        return None

def check_events(bot, chat_id):
    now = datetime.now(TIMEZONE)
    for event in events[:]:
        event_time, desc = event
        reminder_time = event_time - timedelta(minutes=10)
        if reminder_time <= now < reminder_time + timedelta(minutes=1):
            send_msg(bot, chat_id, f"–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: {desc} ({event_time.strftime('%d.%m %H:%M')})")
            events.remove(event)

# ========== –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö ==========
def add_shopping_item(text):
    item = text.replace("–¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫", "").strip()
    if item:
        shopping_list.append(item)
        return f"–î–æ–±–∞–≤–∏–ª –≤ –ø–æ–∫—É–ø–∫–∏: {item}"
    return "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–∫—É–ø–∫–∏?"

def get_shopping_list():
    if not shopping_list:
        return "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç."
    return "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(shopping_list))

def clear_shopping_list():
    shopping_list.clear()
    return "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω."

# ========== TO-DO LIST ==========
def add_todo(text):
    task = text.replace("–¥–µ–ª–æ", "").strip()
    if task:
        todo_list.append(task)
        return f"–î–µ–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {task}"
    return "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–µ–ª–∞?"

def get_todos():
    if not todo_list:
        return "–î–µ–ª –ø–æ–∫–∞ –Ω–µ—Ç."
    return "–¢–≤–æ–∏ –¥–µ–ª–∞:\n" + "\n".join(f"{i+1}. {task}" for i, task in enumerate(todo_list))

def clear_todos():
    todo_list.clear()
    return "–í—Å–µ –¥–µ–ª–∞ –æ—á–∏—â–µ–Ω—ã."

# ========== –î–ù–ò –†–û–ñ–î–ï–ù–ò–Ø ==========
def parse_birthday(text):
    # "–¥–µ–Ω—å—Ä 11.06 –ê—Ä—É–∂–∞–Ω"
    match = re.match(r"–¥–µ–Ω—å—Ä (\d{2})\.(\d{2}) (.+)", text, re.IGNORECASE)
    if not match:
        return None
    day, month, name = match.groups()
    return int(day), int(month), name.strip()

def check_birthdays(bot, chat_id):
    now = datetime.now(TIMEZONE)
    for bday in birthdays[:]:
        day, month, name = bday
        if now.day == day and now.month == month:
            send_msg(bot, chat_id, f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ù–µ –∑–∞–±—É–¥—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å üéâ")
            # –ú–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ–∂–µ–≥–æ–¥–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

# ========== –†–ê–°–ü–ò–°–ê–ù–ò–ï ==========
def today_schedule():
    now = datetime.now(TIMEZONE)
    weekday = now.strftime('%A').lower()
    if weekday not in SCHEDULE:
        return "–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç!"
    lessons = SCHEDULE[weekday]
    text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({weekday.title()}):\n"
    for start, end, subject, room in lessons:
        text += f"{start.strftime('%H:%M')}‚Äì{end.strftime('%H:%M')} ‚Äî {subject} ({room})\n"
    return text.strip()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
def on_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user = update.message.from_user
    chat_id = update.effective_chat.id

    if user.username and ("@" + user.username) == USER_USERNAME:
        # --- –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ ---
        if text.lower().startswith("–¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫"):
            update.message.reply_text(add_shopping_item(text))
            return
        if text.lower() in ["—Å–ø–∏—Å–æ–∫", "–ø–æ–∫—É–ø–∫–∏"]:
            update.message.reply_text(get_shopping_list())
            return
        if text.lower() == "—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ":
            update.message.reply_text("–í –º–∞–≥–∞–∑–∏–Ω–µ –∫—É–ø–∏ –≤—Å—ë –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + get_shopping_list())
            return
        if text.lower() in ["–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", "–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]:
            update.message.reply_text(clear_shopping_list())
            return

        # --- To-Do ---
        if text.lower().startswith("–¥–µ–ª–æ"):
            update.message.reply_text(add_todo(text))
            return
        if text.lower() == "–º–æ–∏ –¥–µ–ª–∞":
            update.message.reply_text(get_todos())
            return
        if text.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å –¥–µ–ª–∞":
            update.message.reply_text(clear_todos())
            return

        # --- –ò–≤–µ–Ω—Ç—ã ---
        if text.lower().startswith("–∏–≤–µ–Ω—Ç"):
            result = parse_event(text)
            if result:
                event_time, desc = result
                events.append((event_time, desc))
                update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {desc} ({event_time.strftime('%d.%m %H:%M')})")
            else:
                update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –∏–≤–µ–Ω—Ç 28.05 10:00 –¥–∂–∏–º —Å –î–∏–¥–∞—Ä–æ–º")
            return

        # --- –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ---
        if text.lower().startswith("–¥–µ–Ω—å—Ä"):
            result = parse_birthday(text)
            if result:
                birthdays.append(result)
                day, month, name = result
                update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {name}, {day:02}.{month:02}")
            else:
                update.message.reply_text("–§–æ—Ä–º–∞—Ç: –¥–µ–Ω—å—Ä 11.06 –ê—Ä—É–∂–∞–Ω")
            return

        # --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ) ---
        if text.lower() in ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"]:
            update.message.reply_text(today_schedule())
            return

        # --- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ---
        update.message.reply_text("–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª! –ù–∞–ø–æ–º–Ω–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫, –¥–µ–ª–æ, —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

    else:
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ–∑—è–∏–Ω–∞ :)")

# ========== –ö–û–ú–ê–ù–î–´ ==========
def start(update, context):
    user = update.message.from_user
    global USER_ID
    if user.username and ("@" + user.username) == USER_USERNAME:
        USER_ID = user.id
        update.message.reply_text("SupportBuddy –≥–æ—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö, —Å–ø–∏—Å–∫–∞—Ö, –¥–µ–ª–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!")
    else:
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ–∑—è–∏–Ω–∞ :)")

def schedule(update, context):
    update.message.reply_text(today_schedule())

# ========== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ==========
def schedule_loop(bot: Bot, chat_id):
    while True:
        now = datetime.now(TIMEZONE)
        weekday = now.strftime('%A').lower()
        # –ü–∞—Ä—ã
        if weekday in SCHEDULE:
            for lesson in SCHEDULE[weekday]:
                lesson_start = datetime.combine(now.date(), lesson[0]).replace(tzinfo=TIMEZONE)
                reminder_time = lesson_start - timedelta(minutes=10)
                if now.hour == reminder_time.hour and now.minute == reminder_time.minute:
                    send_msg(bot, chat_id,
                        f"–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–∞—Ä–∞: {lesson[2]} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {lesson[3]} ({lesson[0].strftime('%H:%M')}‚Äì{lesson[1].strftime('%H:%M')})"
                    )
        # –î–∑—é–¥–æ
        if weekday in JUDO_DAYS:
            reminder = datetime.combine(now.date(), JUDO_REMINDER_TIME).replace(tzinfo=TIMEZONE)
            if now.hour == reminder.hour and now.minute == reminder.minute:
                send_msg(bot, chat_id,
                    "–°–µ—Ä–∏–∫, –ø–æ—Ä–∞ —á–∏—Ç–∞—Ç—å –µ–∫—ñ–Ω—Ç—ñ –Ω–∞–º–∞–∑ –∏ —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –¥–∑—é–¥–æ! –ü–µ—à–∫–æ–º –∏–¥—Ç–∏ 35 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–π—Ç–∏ –∫ 18:00."
                )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        check_events(bot, chat_id)
        check_birthdays(bot, chat_id)
        time_module.sleep(60)

# ========== MAIN ==========
def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('schedule', schedule))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, on_message))

    global USER_ID
    def wait_for_userid():
        while USER_ID is None:
            time_module.sleep(5)
        threading.Thread(target=schedule_loop, args=(updater.bot, USER_ID), daemon=True).start()
    threading.Thread(target=wait_for_userid, daemon=True).start()
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
